version: '3.8'

services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ../.env
      - ../.env.dev # since this is the local integration test, we need to use the dev env file to override the env variables
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  zookeeper:
    image: wurstmeister/zookeeper:latest
    platform: linux/amd64
    ports:
      - "2181:2181"

  kafka:
    container_name: viz-test-kafka-container
    image: wurstmeister/kafka:latest
    platform: linux/amd64
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "ifc-files:1:1, lca-data:1:1, lca-data:1:1, lca-history:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    platform: linux/amd64
    container_name: sqlserver
    environment:
      SA_PASSWORD: "P@ssw0rd" # Match the password in .env.dev
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql

  # Create the database needed by the application
  sqlserver-init:
    image: mcr.microsoft.com/mssql-tools:latest
    platform: linux/amd64
    depends_on:
      - sqlserver
    command: >
      bash -c "
        # Wait for SQL Server to be ready
        echo 'Waiting for SQL Server to be ready...'
        sleep 30
        
        # Create the database
        /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P P@ssw0rd -C -Q 'CREATE DATABASE [nhmzh-viz-services-localdev]'
        echo 'Database created successfully'
      "

  viz_ifc:
    build:
      context: ../viz_ifc
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - STORAGE_API_KEY=123
      - STORAGE_SERVICE_URL=http://viz_pbi-server:3000
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=ROOTUSER
      - MINIO_SECRET_KEY=CHANGEME123
      - MINIO_USE_SSL=false
      - MINIO_IFC_BUCKET=ifc-files
      - KAFKA_BROKER=kafka:9093
      - KAFKA_IFC_TOPIC=ifc-files
      - VIZ_IFC_FRAGMENTS_BUCKET=ifc-fragment-files
    depends_on:
      - minio
      - kafka
    restart: on-failure

  viz_lca-cost:
    build:
      context: ../viz_lca-cost
      dockerfile: Dockerfile
    env_file:
      - ../.env
      - ../.env.dev
    depends_on:
      - sqlserver-init
      - kafka
      - minio
    environment:
      - AZURE_DB_SERVER=sqlserver # Override to connect to the Docker service instead of host.docker.internal
    volumes:
      - ../viz_lca-cost/sql:/app/sql
    restart: on-failure

  viz_pbi-server:
    build:
      context: ../viz_pbi-server
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=development
      - PBI_SRV_API_KEY=123
      - AZURE_STORAGE_ACCOUNT=devstoreaccount1
      - AZURE_STORAGE_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
      - AZURE_STORAGE_URL=http://azurite:10000/devstoreaccount1
      - VIZ_IFC_FRAGMENTS_BUCKET=ifc-fragment-files
    depends_on:
      - azurite
    ports:
      - "3000:3000"

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - "10000:10000"
    command: azurite-blob --blobHost 0.0.0.0
    volumes:
      - azurite_data:/data

volumes:
  minio_data:
  sqlserver_data:
  azurite_data:


